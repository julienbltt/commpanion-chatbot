import whisper
import sounddevice as sd
import numpy as np
import queue
import time

MODEL_NAME = "small"
SAMPLERATE = 16000
CHUNK_DURATION = 0.5  # seconds
SILENCE_THRESHOLD = 0.01
MAX_SILENCE_SECONDS = 1.0

model = whisper.load_model(MODEL_NAME)

def is_silent(audio_chunk):
    return np.abs(audio_chunk).mean() < SILENCE_THRESHOLD

def record_until_silence(audio_queue):
    """Enregistre jusqu'√† d√©tection de silence avec une queue d√©di√©e"""
    buffer = np.empty((0, 1), dtype=np.float32)
    silent_duration = 0
    
    print("üé§ D√©but de l'enregistrement...")
    start_time = time.time()
    min_recording_time = 0.5  # Minimum 0.5 secondes d'enregistrement

    while True:
        try:
            # Timeout pour √©viter les blocages
            chunk = audio_queue.get(timeout=5.0)
            buffer = np.append(buffer, chunk, axis=0)

            if is_silent(chunk):
                silent_duration += CHUNK_DURATION
            else:
                silent_duration = 0

            # Conditions pour arr√™ter l'enregistrement
            recording_time = time.time() - start_time
            if (silent_duration > MAX_SILENCE_SECONDS and 
                recording_time > min_recording_time and 
                len(buffer) > SAMPLERATE * 0.5):
                break
                
            # S√©curit√© : arr√™t apr√®s 30 secondes maximum
            if recording_time > 30:
                print("‚ö†Ô∏è Arr√™t automatique apr√®s 30 secondes")
                break
                
        except queue.Empty:
            print("‚ö†Ô∏è Timeout lors de l'enregistrement audio")
            break

    print(f"üé§ Fin de l'enregistrement ({time.time() - start_time:.2f}s)")
    return np.squeeze(buffer)

def clear_audio_queue(audio_queue):
    """Vide compl√®tement la queue audio"""
    cleared_count = 0
    try:
        while True:
            audio_queue.get_nowait()
            cleared_count += 1
    except queue.Empty:
        pass
    
    if cleared_count > 0:
        print(f"üßπ Queue audio nettoy√©e ({cleared_count} √©l√©ments supprim√©s)")

def transcribe_stream():
    """Transcrit un flux audio avec nettoyage appropri√© des ressources"""
    print("üéß Pr√©paration de l'√©coute...")
    
    # Cr√©er une nouvelle queue pour cette session
    audio_queue = queue.Queue()
    
    def audio_callback(indata, frames, time_info, status):
        if status:
            print(f"‚ö†Ô∏è Audio input status: {status}")
        audio_queue.put(indata.copy())
    
    try:
        print("üëÇ Listening... Speak now.")
        
        # Cr√©er le stream audio avec gestion explicite des ressources
        with sd.InputStream(
            samplerate=SAMPLERATE, 
            channels=1, 
            dtype='float32',
            callback=audio_callback, 
            blocksize=int(SAMPLERATE * CHUNK_DURATION)
        ) as stream:
            
            # Petit d√©lai pour s'assurer que le stream est pr√™t
            time.sleep(0.1)
            
            # Vider la queue au cas o√π il y aurait des donn√©es r√©siduelles
            clear_audio_queue(audio_queue)
            
            # Enregistrer jusqu'au silence
            audio_data = record_until_silence(audio_queue)
            
        # Le stream est automatiquement ferm√© gr√¢ce au context manager
        
        # V√©rifier que nous avons des donn√©es audio valides
        if len(audio_data) == 0:
            print("‚ùå Aucune donn√©e audio captur√©e")
            return ""
            
        if len(audio_data) < SAMPLERATE * 0.3:  # Moins de 0.3 secondes
            print("‚ùå Audio trop court pour √™tre trait√©")
            return ""
        
        print("ü§ñ Transcription en cours...")
        
        # Transcription avec Whisper
        result = model.transcribe(
            audio_data, 
            language='fr', 
            fp16=False, 
            verbose=False
        )
        
        transcribed_text = result['text'].strip()
        print(f"‚úÖ Transcription termin√©e: '{transcribed_text}'")
        
        return transcribed_text
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la transcription: {e}")
        return ""
    
    finally:
        # Nettoyage final
        clear_audio_queue(audio_queue)
        print("üßπ Ressources audio nettoy√©es")

def test_transcription():
    """Fonction de test pour v√©rifier le bon fonctionnement"""
    print("=== TEST DE TRANSCRIPTION ===")
    for i in range(3):
        print(f"\n--- Test {i+1}/3 ---")
        result = transcribe_stream()
        print(f"R√©sultat: '{result}'")
        time.sleep(1)  # Pause entre les tests

if __name__ == "__main__":
    test_transcription()